<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!-- mybatis的数据源交给spring的ioc容器来创建 -->
    <!-- 读取工程下面的properties文件 -->
    <context:property-placeholder location="classpath:jdbc/jdbc.properties" />

    <!-- 配置mybatis的数据源 使用的是dbcp数据库连接池
    常用的数据库连接池 c3p0 dbcp  druid          org.apache.commons.dbcp.BasicDataSource-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
    </bean>
    <!-- sqlSessinFactory在mybatis单独使用的时候
        咱们封装了一个工具类来获取该单例，但是和spring整合之后完全交给spring的ioc容器来实例化该对象
        3个参数：1:mybatis的核心配置文件在哪
               2:mybatis的mapper文件在哪
               3:数据源是谁
        -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 加载mybatis的核心配置文件 -->
        <property name="configLocation" value="classpath:mybatis/mybatis.xml" />
        <!-- 数据源 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 映射文件位置 -->
        <property name="mapperLocations" value="classpath:mappers/*.xml"></property>
        <!-- 指定分页插件   采用的是sql查询拦截原理-->
        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageHelper">
                    <property name="properties">
                        <value>
                            dialect=mysql
                            reasonable=true
                        </value>
                    </property>
                </bean>
            </array>
        </property>
    </bean>

    <!-- mybatis-spring-1.3.0.jar,提供了自动生成mapper代理对象的机制，
    只需要配置mapper接口的包路径和sqlsessionfactory-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.yitian.sq.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!-- 配置spring的注解扫描器，注意 不扫描controller注解 -->
    <context:component-scan base-package="com.yitian.sq">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- 事务管理  aop完成 -->
    <!-- 1:声明和创建spring的事务管理器 -->
    <bean class="org.springframework.jdbc.datasource.DataSourceTransactionManager" id="transactionManager">
    <!-- 数据源 -->
    <property name="dataSource" ref="dataSource"/>
</bean>
    <!-- 2:指定使用事务增强类，来设置事务的传播特性 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
    <tx:attributes>
    <!-- 传播行为 -->
    <tx:method name="save*" propagation="REQUIRED"/>
    <tx:method name="insert*" propagation="REQUIRED"/>
    <tx:method name="add*" propagation="REQUIRED"/>
    <tx:method name="delete*" propagation="REQUIRED"/>
    <tx:method name="update*" propagation="REQUIRED"/>
    <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
    <tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
</tx:attributes>
</tx:advice>
    <!-- 3:设置aop切面 事务管理的切面需要控制在service级别 -->
    <aop:config>
    <aop:advisor pointcut="execution(* com.yitian.sq.service.impl.*.*(..))" advice-ref="txAdvice"/>
</aop:config>

    <!-- 依赖注入mailSender用来发送邮件 -->
    <!-- 使用Spring封装的Mail Sender -->
    <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="smtp.sina.cn" />
        <property name="username" value="sq13473119091@sina.com" />
        <property name="password" value="247988" />
        <property name="javaMailProperties">
            <props>
                <prop key="mail.smtp.auth">true</prop>
            </props>
        </property>
    </bean>

    <!--线程池-->
    <bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <property name="corePoolSize" value="5" /><!-- 线程池维护线程的最少数量 -->
        <property name="keepAliveSeconds" value="200" /><!-- 允许的空闲时间 -->
        <property name="maxPoolSize" value="10" /><!-- 线程池维护线程的最大数量 -->
        <property name="queueCapacity" value="20" /><!-- 缓存队列 -->
        <property name="rejectedExecutionHandler"><!-- 对拒绝task的处理策略 -->
            <bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy" />
        </property>
    </bean>

</beans>
